:py:mod:`landcover_assignment.transition_matrix`
================================================

.. py:module:: landcover_assignment.transition_matrix

.. autoapi-nested-parse::

   Transition Matrix
   =====================
   This module is dedicated to generating transition matrices that represent land use changes between different land uses over time,
   based on scenario-driven projections. It leverages land cover analysis and data management functionalities to calculate transitions,
   particularly focusing on the dynamics between grassland and other land uses under various scenarios.

   Features:
   ---------
   - **Transition Matrix Generation**: Creates matrices that detail the transitions of land use areas from one type to another,
   facilitating scenario analysis and environmental planning.
   - **Land Cover Integration**: Utilizes the `LandCover` class for comprehensive future land use area calculations,
   forming the basis of transition matrix computations.

   Dependencies:
   -------------
   - `pandas` for data manipulation and analysis.
   - `numpy` for numerical calculations.
   - `landcover_assignment.landcover.LandCover` for accessing combined future land use areas.
   - `landcover_assignment.landcover_data_manager.DataManager` for accessing land use columns and other data management tasks.

   Class Documentation:
   --------------------
   .. class:: TransitionMatrix(calibration_year, target_year, scenario_inputs_df, total_grassland, total_spared_area, spared_area_breakdown)
      :noindex:

      Manages the creation of transition matrices for land use changes, supporting environmental and land management scenario analysis.

      Parameters:
      - calibration_year (int): The base year from which land use changes are measured.
      - target_year (int): The future year to which land use changes are projected.
      - scenario_inputs_df (pandas.DataFrame): Inputs defining various scenarios for projection.
      - total_grassland (float): The total area of grassland, important for certain transition calculations.
      - total_spared_area (float): The total area of land spared from development or conversion, influencing land use transitions.
      - spared_area_breakdown (pandas.DataFrame): Detailed breakdown of how spared areas are allocated across land uses.

      Methods:
      - create_transition_matrix() -> pandas.DataFrame:
        Generates a transition matrix detailing the changes in land use areas from the calibration year to the target year.
      - _transition_difference(landuse, index, calibration_year, target_year, land_cover_df) -> float:
        Calculates the difference in area for a specific land use between the calibration and target years.
      - _create_transition_frame(land_cover_df) -> pandas.DataFrame:
        Initializes the structure of the transition matrix based on land use columns and scenario data.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   landcover_assignment.transition_matrix.TransitionMatrix




.. py:class:: TransitionMatrix(calibration_year, target_year, scenario_inputs_df, total_grassland, total_spared_area, spared_area_breakdown)


   Constructs transition matrices to analyze land use changes between a calibration year and a target year under various scenarios.

   Parameters:
   - calibration_year (int): Base year for calibrating land use changes.
   - target_year (int): Future year for projecting land use changes.
   - scenario_inputs_df (pandas.DataFrame): Contains scenario-specific data inputs.
   - total_grassland (float): Total area of grassland, crucial for certain transition calculations.
   - total_spared_area (float): Total area of land spared from development or conversion.
   - spared_area_breakdown (pandas.DataFrame): Details the allocation of spared areas across different land uses.

   Attributes:
   - land_cover_class (LandCover): Instance of LandCover for accessing combined future land use areas.
   - data_manager_class (DataManager): Instance of DataManager for land use data management.

   .. py:method:: create_transition_matrix()

      Generates a transition matrix detailing the changes in land use areas from the calibration year to the target year.


      :return: A DataFrame representing the transition matrix with changes in land use areas.
      :rtype: pandas.DataFrame


   .. py:method:: _transition_difference(landuse, index, calibration_year, target_year, land_cover_df)

      Calculates the difference in area for a specific land use between the calibration and target years.

      :param landuse: Specific land use type.
      :type landuse: str
      :param index: Scenario identifier.
      :type index: int
      :param calibration_year: Initial year for transition.
      :type calibration_year: int
      :param target_year: Target year for transition.
      :type targe_year: int
      :param land_cover_df: DataFrame containing land cover data.
      :type land_cover_df: pandas.DataFrame
      :return: The difference in area for the specified land use between years.
      :rtype: float


   .. py:method:: _create_transition_frame(land_cover_df)

      Initializes the structure of the transition matrix based on land use columns and scenario data.


      :param land_cover_df: DataFrame containing combined future land use areas.
      :type land_cover_df: pandas.DataFrame
      :return: An empty DataFrame structured to represent the transition matrix.
      :rtype: pandas.DataFrame



